#apiVersion: v1
#kind: Namespace
#metadata:
#  name: mla
#
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kinesis2elastic
  namespace: mla
  labels:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
---
apiVersion: v1
kind: Service
metadata:
  name: kinesis2elastic
  namespace: mla
  labels:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kinesis2elastic
  namespace: mla
  annotations:
    keel.sh/match-tag: "true"
    keel.sh/policy: force
    keel.sh/pollSchedule: '@every 2m'
    keel.sh/trigger: poll
  labels:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kinesis2elastic
      app.kubernetes.io/instance: kinesis2elastic
      app.kubernetes.io/version: "0.1"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kinesis2elastic
        app.kubernetes.io/instance: kinesis2elastic
        app.kubernetes.io/version: "0.1"
    spec:
      serviceAccountName: kinesis2elastic
      containers:
        - name: kinesis2elastic
          image: moulick/kinesis2elastic:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              port: http
              path: /ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            httpGet:
              port: http
              path: /ping
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          env:
            - name: PORT
              value: "8080"
            - name: OPENSEARCH_URL
              value: https://localhost:443
            - name: OUTPUT_INDEX
              value: firehose
          resources:
            limits:
              cpu: 250m
              memory: 250Mi
            requests:
              cpu: 100m
              memory: 100Mi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kinesis2elastic
  namespace: mla
  annotations:
    kubernetes.io/ingress.class: nginx-public
  labels:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
spec:
  rules:
    - host: dummy.com
      http:
        paths:
          - path: /firehose
            pathType: Prefix
            backend:
              service:
                name: kinesis2elastic
                port:
                  number: 8080
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kinesis2elastic
  namespace: mla
  labels:
    app.kubernetes.io/name: kinesis2elastic
    app.kubernetes.io/instance: kinesis2elastic
    app.kubernetes.io/version: "0.1"
spec:
  endpoints:
    - port: http
      interval: 30s
      path: /metrics
  namespaceSelector:
    matchNames:
      - mla
  selector:
    matchLabels:
      app.kubernetes.io/name: kinesis2elastic
      app.kubernetes.io/instance: kinesis2elastic
      app.kubernetes.io/version: "0.1"
