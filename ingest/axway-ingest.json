{
  "description": "Pipeline for parsing Axway HTTP Server access logs.",
  "processors": [
    {
      "grok": {
        "field": "records.data.logEvents.message.text",
        "patterns": [
          "%{HOSTNAME:remote.host} - %{HTTPDUSER:user.name} \\[%{HTTPDATE:apache.access.time}\\]  \"(?:%{WORD:http.request.method} %{DATA:_tmp.url_orig} HTTP/%{NUMBER:http.version}|-)?\" %{NUMBER:http.response.status_code:long} (?:%{NUMBER:http.response.body.bytes:long}|-) %{NUMBER:http.response.time:long} \"(?<x_forwarded_for>%{IP:source.address}(?:,[^,]+)*)\" %{DATA:hc.request.clientid} (%{DATA:hc.transactionid}|-) %{GREEDYDATA:hc.correlationid}"
        ],
        "ignore_missing": true
      }
    },
    {
      "uri_parts": {
        "field": "_tmp.url_orig"
      }
    },
    {
      "set": {
        "field": "url.domain",
        "value": "{{destination.domain}}",
        "if": "ctx.url?.domain == null && ctx.destination?.domain != null"
      }
    },
    {
      "remove": {
        "field": [
          "_tmp.url_orig"
        ],
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "event.kind",
        "value": "event"
      }
    },
    {
      "set": {
        "field": "event.category",
        "value": "web"
      }
    },
    {
      "set": {
        "field": "event.outcome",
        "value": "success",
        "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code < 400"
      }
    },
    {
      "set": {
        "field": "event.outcome",
        "value": "failure",
        "if": "ctx?.http?.response?.status_code != null && ctx.http.response.status_code > 399"
      }
    },
    {
      "grok": {
        "field": "source.address",
        "ignore_missing": true,
        "patterns": [
          "^(%{IP:source.ip}|%{HOSTNAME:source.domain})$"
        ]
      }
    },
    {
      "set": {
        "copy_from": "@timestamp",
        "field": "event.created"
      }
    },
    {
      "date": {
        "field": "apache.access.time",
        "target_field": "@timestamp",
        "formats": [
          "dd/MMM/yyyy:H:m:s Z"
        ],
        "ignore_failure": true
      }
    },
    {
      "remove": {
        "field": "apache.access.time",
        "ignore_failure": true
      }
    },
    {
      "geoip": {
        "field": "source.ip",
        "target_field": "source.geo",
        "ignore_missing": true
      }
    },
    {
      "geoip": {
        "database_file": "GeoLite2-ASN.mmdb",
        "field": "source.ip",
        "target_field": "source.as",
        "properties": [
          "asn",
          "organization_name"
        ],
        "ignore_missing": true
      }
    },
    {
      "rename": {
        "field": "source.as.asn",
        "target_field": "source.as.number",
        "ignore_missing": true
      }
    },
    {
      "rename": {
        "field": "source.as.organization_name",
        "target_field": "source.as.organization.name",
        "ignore_missing": true
      }
    },
    {
      "set": {
        "field": "tls.cipher",
        "value": "{{apache.access.ssl.cipher}}",
        "ignore_empty_value": true
      }
    },
    {
      "script": {
        "lang": "painless",
        "if": "ctx?.apache?.access?.ssl?.protocol != null",
        "source": "def parts = ctx.apache.access.ssl.protocol.toLowerCase().splitOnToken(\"v\"); if (parts.length != 2) {\n  return;\n} if (parts[1].contains(\".\")) {\n  ctx.tls.version = parts[1];\n} else {\n  ctx.tls.version = parts[1] + \".0\";\n} ctx.tls.version_protocol = parts[0];"
      }
    },
    {
      "script": {
        "lang": "painless",
        "description": "This script processor iterates over the whole document to remove fields with null values.",
        "source": "void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\n  map.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n"
      }
    }
  ],
  "on_failure": [
    {
      "set": {
        "field": "error.message",
        "value": "{{ _ingest.on_failure_message }}"
      }
    }
  ]
}
